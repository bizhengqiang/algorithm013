                                分治算法
1、分治算法：
    注意：分治算法是一种处理问题的思想，递归是一种编程技巧。我们经常将分治的思想运用在递归的编码中实现，并不是说分治和递归是一回事。

2、分治算法的一般步骤：
    分解：将原问题分解成一系列子问题；
    解决：递归地求解各个子问题，若子问题足够小，则直接求解；
    合并：将子问题的结果合并成原问题。

3、分治算法需要满足的条件：
    [1]原问题与分解成的小问题具有相同的模式；
    [2]原问题分解成的子问题可以独立求解，子问题之间没有相关性，这一点是分治算法跟动态规划的明显区别。
    [3]具有分解终止条件，也就是说，当问题足够小时，可以直接求解；
    [4]可以将子问题合并成原问题，而这个合并操作的复杂度不能太高，否则就起不到减小算法总体复杂度的效果了。

4、分治思想的应用：
    [1]海量数据处理中,把海量的数据，比如100T排序，我们不可能将100T数据都加载内存中排序，需要分成小问题。
    [2]MapReduce使用。


                               回溯算法
    回溯算法的思想非常简单，大部分情况下，都是用来解决广义的搜索问题，也就是，从一组可能的解中，选择出一个满足要求的解。
    回溯算法非常适合用递归来实现，在实现的过程中，剪枝操作是提高回溯效率的一种技巧。
    简单理解：回溯就是暴力枚举的解法，遍历所有情况，当满足情况就停止遍历（剪枝），所以，在回溯算法中，最重要的是要剪枝。不然效率很低。


