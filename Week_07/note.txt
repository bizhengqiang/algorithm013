1.DFS模板
（1）递归写法：
Set visited = new HashSet<Node>();
void dfs(node, visited): 
if node in visited: # terminator 
# already visited 
return 
 visited.add(node) 
# process current node here. 
...
for next_node in node.children(): 
 if not next_node in visited: 
 dfs(next_node, visited)
（2）非递归写法：
def DFS(self, tree): 
if tree.root is None: 
 	return [] 
 	visited, stack = [], [tree.root] 
while stack: 
 	node = stack.pop() 
 	visited.add(node) 
 	process (node) 
 	nodes = generate_related_nodes(node) 
 	stack.push(nodes) 
2.BFS模板


def BFS(graph, start, end): 
 	queue = [] 
 	queue.append([start]) 
 	visited.add(start) 
while queue: 
 		node = queue.pop() 
 		visited.add(node) 
 		process(node) 
 		nodes = generate_related_nodes(node) 
 		queue.push(nodes) 
# other processing work 



3.二分查找
   （1）条件：
a.目标函数单调性（单调递增或者递减）
b.存在上下界（bounded）
c.能够通过索引访问（index accessible)

2.二分法代码模板：
left, right = 0, len(array) - 1 
while left <= right: 
  mid = (left + right) / 2 
  if array[mid] == target: 
  	# find the target!! 
  	Break or return result 
  elif array[mid] < target: 
 	 left = mid + 1 
  else: 
  	right = mid -1


int left = 0;
int right = arrray.length - 1;
while(left<=right){
int mid =  (left + right) / 2;
If(array[mid] == target) {
Break or return result;
}else if(array[mid] < target){
Left = mid + 1;
}else{
right = mid -1;
}
}


动态规划：
1.动态规划思考过程
（1）最优子结构 opt[n] = best_of(opt[n-1], opt[n-2], …)
（2）储存中间状态：opt[i]3. 递推公式（美其名曰：状态转移方程或者 DP 方程） 
Fib: opt[i] = opt[n-1] + opt[n-2] 
（3）二维路径：opt[i,j] = opt[i+1][j] + opt[i][j+1] (且判断a[i,j]是否空地）

2.思维要点
（1）打破自己的思维惯性，形成机器思维
（2）理解复杂逻辑的关键
（3）也是职业进阶的要点要领